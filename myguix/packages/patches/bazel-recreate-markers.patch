This patch was taken from Nixpkgs.  It forces Bazel to recreate a
repository marker's hash instead of aborting.  This allows us to
bundle all inputs in advance and modify them as needed without having
to worry about Bazel rejecting the bundled repositories.

--- a/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java	2025-06-12 21:01:31.382197854 +0000
+++ b/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java	2025-06-12 21:01:34.778198617 +0000
@@ -685,30 +685,20 @@
     @Nullable
     RepoDirectoryState areRepositoryAndMarkerFileConsistent(
         RepositoryFunction handler, Environment env, Path markerPath)
         throws RepositoryFunctionException, InterruptedException {
       if (!markerPath.exists()) {
         return new RepoDirectoryState.OutOfDate("repo hasn't been fetched yet");
       }
 
       try {
         String content = FileSystemUtils.readContent(markerPath, UTF_8);
-        Map<RepoRecordedInput, String> recordedInputValues =
-            readMarkerFile(content, Preconditions.checkNotNull(ruleKey));
-        Optional<String> outdatedReason =
-            handler.isAnyRecordedInputOutdated(directories, recordedInputValues, env);
-        if (env.valuesMissing()) {
-          return null;
-        }
-        if (outdatedReason.isPresent()) {
-          return new RepoDirectoryState.OutOfDate(outdatedReason.get());
-        }
         return new RepoDirectoryState.UpToDate(
             new Fingerprint().addString(content).digestAndReset());
       } catch (IOException e) {
         throw new RepositoryFunctionException(e, Transience.TRANSIENT);
       }
     }
 
     private static Map<RepoRecordedInput, String> readMarkerFile(
         String content, String expectedRuleKey) {
       Iterable<String> lines = Splitter.on('\n').split(content);
--- a/src/main/java/com/google/devtools/build/lib/shell/JavaSubprocessFactory.java	2025-06-12 21:01:31.386197852 +0000
+++ b/src/main/java/com/google/devtools/build/lib/shell/JavaSubprocessFactory.java	2025-06-12 21:01:37.550200543 +0000
@@ -151,21 +151,20 @@
       }
       throw e;
     }
   }
 
   @Override
   public Subprocess create(SubprocessBuilder params) throws IOException {
     ProcessBuilder builder = new ProcessBuilder();
     builder.command(Lists.transform(params.getArgv(), StringEncoding::internalToPlatform));
     if (params.getEnv() != null) {
-      builder.environment().clear();
       params
           .getEnv()
           .forEach(
               (key, value) ->
                   builder
                       .environment()
                       .put(
                           StringEncoding.internalToPlatform(key),
                           StringEncoding.internalToPlatform(value)));
     }
