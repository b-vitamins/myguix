diff --git c/third_party/amd/backend/driver.py w/third_party/amd/backend/driver.py
index e29ac5f7a..659d598ab 100644
--- c/third_party/amd/backend/driver.py
+++ w/third_party/amd/backend/driver.py
@@ -110,15 +110,18 @@ def _get_path_to_hip_runtime_dylib():
             paths.append(f)
 
     # Afterwards try to search the loader dynamic library resolution paths.
-    libs = subprocess.check_output(["/sbin/ldconfig", "-p"]).decode()
-    # each line looks like the following:
-    # libamdhip64.so.6 (libc6,x86-64) => /opt/rocm-6.0.2/lib/libamdhip64.so.6
-    # libamdhip64.so (libc6,x86-64) => /opt/rocm-6.0.2/lib/libamdhip64.so
-    locs = [line.split()[-1] for line in libs.splitlines() if line.strip().endswith(lib_name)]
-    for loc in locs:
-        if os.path.exists(loc):
-            return loc
-        paths.append(loc)
+    try:
+        libs = subprocess.check_output(["/sbin/ldconfig", "-p"]).decode()
+        # each line looks like the following:
+        # libamdhip64.so.6 (libc6,x86-64) => /opt/rocm-6.0.2/lib/libamdhip64.so.6
+        # libamdhip64.so (libc6,x86-64) => /opt/rocm-6.0.2/lib/libamdhip64.so
+        locs = [line.split()[-1] for line in libs.splitlines() if line.strip().endswith(lib_name)]
+        for loc in locs:
+            if os.path.exists(loc):
+                return loc
+            paths.append(loc)
+    except (subprocess.CalledProcessError, FileNotFoundError):
+        pass  # ldconfig not available or failed
 
     # As a last resort, guess if we have it in some common installation path.
     common_install_path = os.path.join('/opt/rocm/lib/', lib_name)
diff --git c/third_party/nvidia/backend/driver.py w/third_party/nvidia/backend/driver.py
index 47544bd8e..5e683c695 100644
--- c/third_party/nvidia/backend/driver.py
+++ w/third_party/nvidia/backend/driver.py
@@ -22,21 +22,33 @@ def libcuda_dirs():
     if env_libcuda_path := knobs.nvidia.libcuda_path:
         return [env_libcuda_path]
 
-    libs = subprocess.check_output(["/sbin/ldconfig", "-p"]).decode()
-    # each line looks like the following:
-    # libcuda.so.1 (libc6,x86-64) => /lib/x86_64-linux-gnu/libcuda.so.1
-    locs = [line.split()[-1] for line in libs.splitlines() if "libcuda.so.1" in line]
-    dirs = [os.path.dirname(loc) for loc in locs]
+    dirs = []
+    locs = []
+    
+    # Try ldconfig first if available
+    try:
+        libs = subprocess.check_output(["/sbin/ldconfig", "-p"]).decode()
+        # each line looks like the following:
+        # libcuda.so.1 (libc6,x86-64) => /lib/x86_64-linux-gnu/libcuda.so.1
+        locs = [line.split()[-1] for line in libs.splitlines() if "libcuda.so.1" in line]
+        dirs = [os.path.dirname(loc) for loc in locs]
+    except (subprocess.CalledProcessError, FileNotFoundError):
+        pass  # ldconfig not available or failed
+    
+    # Always check LD_LIBRARY_PATH as fallback
     env_ld_library_path = os.getenv("LD_LIBRARY_PATH")
-    if env_ld_library_path and not dirs:
-        dirs = [dir for dir in env_ld_library_path.split(":") if os.path.exists(os.path.join(dir, "libcuda.so.1"))]
-    msg = 'libcuda.so cannot found!\n'
-    if locs:
-        msg += 'Possible files are located at %s.' % str(locs)
-        msg += 'Please create a symlink of libcuda.so to any of the files.'
+    if env_ld_library_path:
+        for dir in env_ld_library_path.split(":"):
+            if os.path.exists(os.path.join(dir, "libcuda.so.1")) and dir not in dirs:
+                dirs.append(dir)
+    msg = 'libcuda.so cannot be found!\n'
+    if dirs:
+        msg += f'Found libcuda.so.1 in: {dirs}\n'
+        msg += 'But libcuda.so symlink may be missing.'
     else:
-        msg += 'Please make sure GPU is set up and then run "/sbin/ldconfig"'
-        msg += ' (requires sudo) to refresh the linker cache.'
+        msg += 'Please ensure NVIDIA drivers are installed and either:\n'
+        msg += '  - Set TRITON_LIBCUDA_PATH environment variable to the directory containing libcuda.so, or\n'
+        msg += '  - Add the library directory to LD_LIBRARY_PATH'
     assert any(os.path.exists(os.path.join(path, 'libcuda.so.1')) for path in dirs), msg
     return dirs
 
