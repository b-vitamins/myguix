diff --git i/CMakeLists.txt w/CMakeLists.txt
index b0fd7ceab..41b1dbe2d 100644
--- i/CMakeLists.txt
+++ w/CMakeLists.txt
@@ -209,63 +209,81 @@ if(TRITON_BUILD_PYTHON_MODULE)
 
   get_property(triton_libs GLOBAL PROPERTY TRITON_LIBS)
   get_property(triton_plugins GLOBAL PROPERTY TRITON_PLUGINS)
-  set(TRITON_LIBRARIES
-    ${triton_libs}
-    ${triton_plugins}
+  # When LLVM_LINK_LLVM_DYLIB is ON, link against the monolithic libraries
+  # to avoid duplicate symbol issues
+  if(LLVM_LINK_LLVM_DYLIB)
+    set(TRITON_LIBRARIES
+      ${triton_libs}
+      ${triton_plugins}
+      LLVM
+      MLIR
+    )
+  else()
+    set(TRITON_LIBRARIES
+      ${triton_libs}
+      ${triton_plugins}
 
-    # mlir
-    MLIRAMDGPUDialect
-    MLIRNVVMDialect
-    MLIRNVVMToLLVMIRTranslation
-    MLIRGPUToNVVMTransforms
-    MLIRGPUToGPURuntimeTransforms
-    MLIRGPUTransforms
-    MLIRIR
-    MLIRControlFlowToLLVM
-    MLIRBytecodeWriter
-    MLIRPass
-    MLIRTransforms
-    MLIRLLVMDialect
-    MLIRSupport
-    MLIRTargetLLVMIRExport
-    MLIRMathToLLVM
-    MLIRROCDLToLLVMIRTranslation
-    MLIRGPUDialect
-    MLIRSCFToControlFlow
-    MLIRIndexToLLVM
-    MLIRGPUToROCDLTransforms
-    MLIRUBToLLVM
-
-    # LLVM
-    LLVMPasses
-    LLVMNVPTXCodeGen
-    # LLVMNVPTXAsmPrinter
-    LLVMAMDGPUCodeGen
-    LLVMAMDGPUAsmParser
+      # mlir
+      MLIRAMDGPUDialect
+      MLIRNVVMDialect
+      MLIRNVVMToLLVMIRTranslation
+      MLIRGPUToNVVMTransforms
+      MLIRGPUToGPURuntimeTransforms
+      MLIRGPUTransforms
+      MLIRIR
+      MLIRControlFlowToLLVM
+      MLIRBytecodeWriter
+      MLIRPass
+      MLIRTransforms
+      MLIRLLVMDialect
+      MLIRSupport
+      MLIRTargetLLVMIRExport
+      MLIRMathToLLVM
+      MLIRROCDLToLLVMIRTranslation
+      MLIRGPUDialect
+      MLIRSCFToControlFlow
+      MLIRIndexToLLVM
+      MLIRGPUToROCDLTransforms
+      MLIRUBToLLVM
 
+      # LLVM
+      LLVMPasses
+      LLVMNVPTXCodeGen
+      # LLVMNVPTXAsmPrinter
+      LLVMAMDGPUCodeGen
+      LLVMAMDGPUAsmParser
+    )
+  endif()
+  
+  # Add Python bindings to all configurations
+  list(APPEND TRITON_LIBRARIES
     Python3::Module
     pybind11::headers
-
   )
-  if(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64" OR # Linux arm64
-     CMAKE_SYSTEM_PROCESSOR MATCHES "arm64" OR # macOS arm64
-     CMAKE_OSX_ARCHITECTURES MATCHES "arm64")  # also macOS arm64
-      list(APPEND TRITON_LIBRARIES
-          LLVMAArch64CodeGen
-          LLVMAArch64AsmParser
-      )
-  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "AMD64")
-      list(APPEND TRITON_LIBRARIES
-          LLVMX86CodeGen
-          LLVMX86AsmParser
-      )
-  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64le")
-      list(APPEND TRITON_LIBRARIES
-        LLVMPowerPCAsmParser
-        LLVMPowerPCCodeGen
-      )
-  else()
-    message(FATAL_ERROR "LLVM codegen/ASM parser libs: This HW architecture (${CMAKE_SYSTEM_PROCESSOR}) is not configured in cmake lib dependencies.")
+  
+  # Architecture-specific libraries are only needed when not using LLVM_LINK_LLVM_DYLIB
+  # (they're already included in libLLVM.so when LLVM_LINK_LLVM_DYLIB is ON)
+  if(NOT LLVM_LINK_LLVM_DYLIB)
+    if(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64" OR # Linux arm64
+       CMAKE_SYSTEM_PROCESSOR MATCHES "arm64" OR # macOS arm64
+       CMAKE_OSX_ARCHITECTURES MATCHES "arm64")  # also macOS arm64
+        list(APPEND TRITON_LIBRARIES
+            LLVMAArch64CodeGen
+            LLVMAArch64AsmParser
+        )
+    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "AMD64")
+        list(APPEND TRITON_LIBRARIES
+            LLVMX86CodeGen
+            LLVMX86AsmParser
+        )
+    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64le")
+        list(APPEND TRITON_LIBRARIES
+          LLVMPowerPCAsmParser
+          LLVMPowerPCCodeGen
+        )
+    else()
+      message(FATAL_ERROR "LLVM codegen/ASM parser libs: This HW architecture (${CMAKE_SYSTEM_PROCESSOR}) is not configured in cmake lib dependencies.")
+    endif()
   endif()
 
   # Define triton library
