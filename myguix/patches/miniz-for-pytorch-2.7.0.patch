diff --git a/miniz.c b/miniz.c
index 8d0032f..bd6b9f8 100644
--- a/miniz.c
+++ b/miniz.c
@@ -39,6 +39,7 @@ extern "C" {
 
 mz_ulong mz_adler32(mz_ulong adler, const unsigned char *ptr, size_t buf_len)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers,cppcoreguidelines-init-variables)
     mz_uint32 i, s1 = (mz_uint32)(adler & 0xffff), s2 = (mz_uint32)(adler >> 16);
     size_t block_len = buf_len % 5552;
     if (!ptr)
@@ -196,6 +197,7 @@ int mz_deflateInit(mz_streamp pStream, int level)
 
 int mz_deflateInit2(mz_streamp pStream, int level, int method, int window_bits, int mem_level, int strategy)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     tdefl_compressor *pComp;
     mz_uint comp_flags = TDEFL_COMPUTE_ADLER32 | tdefl_create_comp_flags_from_zip_params(level, window_bits, strategy);
 
@@ -241,7 +243,9 @@ int mz_deflateReset(mz_streamp pStream)
 
 int mz_deflate(mz_streamp pStream, int flush)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     size_t in_bytes, out_bytes;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_ulong orig_total_in, orig_total_out;
     int mz_status = MZ_OK;
 
@@ -260,6 +264,7 @@ int mz_deflate(mz_streamp pStream, int flush)
     orig_total_out = pStream->total_out;
     for (;;)
     {
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         tdefl_status defl_status;
         in_bytes = pStream->avail_in;
         out_bytes = pStream->avail_out;
@@ -318,6 +323,7 @@ mz_ulong mz_deflateBound(mz_streamp pStream, mz_ulong source_len)
 
 int mz_compress2(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len, int level)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     int status;
     mz_stream stream;
     memset(&stream, 0, sizeof(stream));
@@ -371,6 +377,7 @@ typedef struct
 
 int mz_inflateInit2(mz_streamp pStream, int window_bits)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     inflate_state *pDecomp;
     if (!pStream)
         return MZ_STREAM_ERROR;
@@ -412,6 +419,7 @@ int mz_inflateInit(mz_streamp pStream)
 
 int mz_inflateReset(mz_streamp pStream)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     inflate_state *pDecomp;
     if (!pStream)
         return MZ_STREAM_ERROR;
@@ -438,9 +446,13 @@ int mz_inflateReset(mz_streamp pStream)
 
 int mz_inflate(mz_streamp pStream, int flush)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     inflate_state *pState;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint n, first_call, decomp_flags = TINFL_FLAG_COMPUTE_ADLER32;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     size_t in_bytes, out_bytes, orig_avail_in;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     tinfl_status status;
 
     if ((!pStream) || (!pStream->state))
@@ -607,6 +619,7 @@ const char *mz_error(int err)
         {
           { MZ_OK, "" }, { MZ_STREAM_END, "stream end" }, { MZ_NEED_DICT, "need dictionary" }, { MZ_ERRNO, "file error" }, { MZ_STREAM_ERROR, "stream error" }, { MZ_DATA_ERROR, "data error" }, { MZ_MEM_ERROR, "out of memory" }, { MZ_BUF_ERROR, "buf error" }, { MZ_VERSION_ERROR, "version error" }, { MZ_PARAM_ERROR, "parameter error" }
         };
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint i;
     for (i = 0; i < sizeof(s_error_descs) / sizeof(s_error_descs[0]); ++i)
         if (s_error_descs[i].m_err == err)
@@ -752,6 +765,7 @@ typedef struct
 } tdefl_sym_freq;
 static tdefl_sym_freq *tdefl_radix_sort_syms(mz_uint num_syms, tdefl_sym_freq *pSyms0, tdefl_sym_freq *pSyms1)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers,cppcoreguidelines-init-variables)
     mz_uint32 total_passes = 2, pass_shift, pass, i, hist[256 * 2];
     tdefl_sym_freq *pCur_syms = pSyms0, *pNew_syms = pSyms1;
     MZ_CLEAR_ARR(hist);
@@ -786,6 +800,7 @@ static tdefl_sym_freq *tdefl_radix_sort_syms(mz_uint num_syms, tdefl_sym_freq *p
 /* tdefl_calculate_minimum_redundancy() originally written by: Alistair Moffat, alistair@cs.mu.oz.au, Jyrki Katajainen, jyrki@diku.dk, November 1996. */
 static void tdefl_calculate_minimum_redundancy(tdefl_sym_freq *A, int n)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     int root, leaf, next, avbl, used, dpth;
     if (n == 0)
         return;
@@ -846,6 +861,7 @@ enum
 };
 static void tdefl_huffman_enforce_max_code_size(int *pNum_codes, int code_list_len, int max_code_size)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     int i;
     mz_uint32 total = 0;
     if (code_list_len <= 1)
@@ -870,6 +886,7 @@ static void tdefl_huffman_enforce_max_code_size(int *pNum_codes, int code_list_l
 
 static void tdefl_optimize_huffman_table(tdefl_compressor *d, int table_num, int table_len, int code_size_limit, int static_table)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     int i, j, l, num_codes[1 + TDEFL_MAX_SUPPORTED_HUFF_CODESIZE];
     mz_uint next_code[TDEFL_MAX_SUPPORTED_HUFF_CODESIZE + 1];
     MZ_CLEAR_ARR(num_codes);
@@ -880,6 +897,7 @@ static void tdefl_optimize_huffman_table(tdefl_compressor *d, int table_num, int
     }
     else
     {
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         tdefl_sym_freq syms0[TDEFL_MAX_HUFF_SYMBOLS], syms1[TDEFL_MAX_HUFF_SYMBOLS], *pSyms;
         int num_used_syms = 0;
         const mz_uint16 *pSym_count = &d->m_huff_count[table_num][0];
@@ -911,6 +929,7 @@ static void tdefl_optimize_huffman_table(tdefl_compressor *d, int table_num, int
 
     for (i = 0; i < table_len; i++)
     {
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         mz_uint rev_code = 0, code, code_size;
         if ((code_size = d->m_huff_code_sizes[table_num][i]) == 0)
             continue;
@@ -985,11 +1004,14 @@ static void tdefl_optimize_huffman_table(tdefl_compressor *d, int table_num, int
         }                                                                                  \
     }
 
+// NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables,cppcoreguidelines-avoid-magic-numbers)
 static const mz_uint8 s_tdefl_packed_code_size_syms_swizzle[] = { 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 };
 
 static void tdefl_start_dynamic_block(tdefl_compressor *d)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     int num_lit_codes, num_dist_codes, num_bit_lengths;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint i, total_code_sizes_to_pack, num_packed_code_sizes, rle_z_count, rle_repeat_count, packed_code_sizes_index;
     mz_uint8 code_sizes_to_pack[TDEFL_MAX_HUFF_SYMBOLS_0 + TDEFL_MAX_HUFF_SYMBOLS_1], packed_code_sizes[TDEFL_MAX_HUFF_SYMBOLS_0 + TDEFL_MAX_HUFF_SYMBOLS_1], prev_code_size = 0xFF;
 
@@ -1070,12 +1092,14 @@ static void tdefl_start_dynamic_block(tdefl_compressor *d)
         MZ_ASSERT(code < TDEFL_MAX_HUFF_SYMBOLS_2);
         TDEFL_PUT_BITS(d->m_huff_codes[2][code], d->m_huff_code_sizes[2][code]);
         if (code >= 16)
+            // NOLINTNEXTLINE(bugprone-signed-char-misuse)
             TDEFL_PUT_BITS(packed_code_sizes[packed_code_sizes_index++], "\02\03\07"[code - 16]);
     }
 }
 
 static void tdefl_start_static_block(tdefl_compressor *d)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint i;
     mz_uint8 *p = &d->m_huff_code_sizes[0][0];
 
@@ -1196,7 +1220,9 @@ static mz_bool tdefl_compress_lz_codes(tdefl_compressor *d)
 #else
 static mz_bool tdefl_compress_lz_codes(tdefl_compressor *d)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint flags;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint8 *pLZ_codes;
 
     flags = 1;
@@ -1206,6 +1232,7 @@ static mz_bool tdefl_compress_lz_codes(tdefl_compressor *d)
             flags = *pLZ_codes++ | 0x100;
         if (flags & 1)
         {
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             mz_uint sym, num_extra_bits;
             mz_uint match_len = pLZ_codes[0], match_dist = (pLZ_codes[1] | (pLZ_codes[2] << 8));
             pLZ_codes += 3;
@@ -1255,9 +1282,12 @@ static const mz_uint s_tdefl_num_probes[11];
 
 static int tdefl_flush_block(tdefl_compressor *d, int flush)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint saved_bit_buf, saved_bits_in;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint8 *pSaved_output_buf;
     mz_bool comp_block_succeeded = MZ_FALSE;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     int n, use_raw_block = ((d->m_flags & TDEFL_FORCE_ALL_RAW_BLOCKS) != 0) && (d->m_lookahead_pos - d->m_lz_code_buf_dict_pos) <= d->m_dict_size;
     mz_uint8 *pOutput_buf_start = ((d->m_pPut_buf_func == NULL) && ((*d->m_pOut_buf_size - d->m_out_buf_ofs) >= TDEFL_OUT_BUF_SIZE)) ? ((mz_uint8 *)d->m_pOut_buf + d->m_out_buf_ofs) : d->m_output_buf;
 
@@ -1309,6 +1339,7 @@ static int tdefl_flush_block(tdefl_compressor *d, int flush)
     if (((use_raw_block) || ((d->m_total_lz_bytes) && ((d->m_pOutput_buf - pSaved_output_buf + 1U) >= d->m_total_lz_bytes))) &&
         ((d->m_lookahead_pos - d->m_lz_code_buf_dict_pos) <= d->m_dict_size))
     {
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         mz_uint i;
         d->m_pOutput_buf = pSaved_output_buf;
         d->m_bit_buffer = saved_bit_buf, d->m_bits_in = saved_bits_in;
@@ -1344,6 +1375,7 @@ static int tdefl_flush_block(tdefl_compressor *d, int flush)
             }
             if (d->m_flags & TDEFL_WRITE_ZLIB_HEADER)
             {
+                // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                 mz_uint i, a = d->m_adler32;
                 for (i = 0; i < 4; i++)
                 {
@@ -1354,6 +1386,7 @@ static int tdefl_flush_block(tdefl_compressor *d, int flush)
         }
         else
         {
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             mz_uint i, z = 0;
             TDEFL_PUT_BITS(0, 3);
             if (d->m_bits_in)
@@ -1427,9 +1460,12 @@ static mz_uint16 TDEFL_READ_UNALIGNED_WORD2(const mz_uint16* p)
 #endif
 static MZ_FORCEINLINE void tdefl_find_match(tdefl_compressor *d, mz_uint lookahead_pos, mz_uint max_dist, mz_uint max_match_len, mz_uint *pMatch_dist, mz_uint *pMatch_len)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint dist, pos = lookahead_pos & TDEFL_LZ_DICT_SIZE_MASK, match_len = *pMatch_len, probe_pos = pos, next_probe_pos, probe_len;
     mz_uint num_probes_left = d->m_max_probes[match_len >= 32];
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     const mz_uint16 *s = (const mz_uint16 *)(d->m_dict + pos), *p, *q;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint16 c01 = TDEFL_READ_UNALIGNED_WORD(&d->m_dict[pos + match_len - 1]), s01 = TDEFL_READ_UNALIGNED_WORD2(s);
     MZ_ASSERT(max_match_len <= TDEFL_MAX_MATCH_LEN);
     if (max_match_len <= match_len)
@@ -1712,6 +1748,7 @@ static MZ_FORCEINLINE void tdefl_record_literal(tdefl_compressor *d, mz_uint8 li
 {
     d->m_total_lz_bytes++;
     *d->m_pLZ_code_buf++ = lit;
+    // NOLINTNEXTLINE(clang-analyzer-core.UndefinedBinaryOperatorResult)
     *d->m_pLZ_flags = (mz_uint8)(*d->m_pLZ_flags >> 1);
     if (--d->m_num_flags_left == 0)
     {
@@ -1723,6 +1760,7 @@ static MZ_FORCEINLINE void tdefl_record_literal(tdefl_compressor *d, mz_uint8 li
 
 static MZ_FORCEINLINE void tdefl_record_match(tdefl_compressor *d, mz_uint match_len, mz_uint match_dist)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 s0, s1;
 
     MZ_ASSERT((match_len >= TDEFL_MIN_MATCH_LEN) && (match_dist >= 1) && (match_dist <= TDEFL_LZ_DICT_SIZE));
@@ -1757,6 +1795,7 @@ static mz_bool tdefl_compress_normal(tdefl_compressor *d)
 
     while ((src_buf_left) || ((flush) && (d->m_lookahead_size)))
     {
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         mz_uint len_to_move, cur_match_dist, cur_match_len, cur_pos;
         /* Update dictionary and hash chains. Keeps the lookahead size equal to TDEFL_MAX_MATCH_LEN. */
         if ((d->m_lookahead_size + d->m_dict_size) >= (TDEFL_MIN_MATCH_LEN - 1))
@@ -1881,6 +1920,7 @@ static mz_bool tdefl_compress_normal(tdefl_compressor *d)
         if ((d->m_pLZ_code_buf > &d->m_lz_code_buf[TDEFL_LZ_CODE_BUF_SIZE - 8]) ||
             ((d->m_total_lz_bytes > 31 * 1024) && (((((mz_uint)(d->m_pLZ_code_buf - d->m_lz_code_buf) * 115) >> 7) >= d->m_total_lz_bytes) || (d->m_flags & TDEFL_FORCE_ALL_RAW_BLOCKS))))
         {
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             int n;
             d->m_pSrc = pSrc;
             d->m_src_buf_left = src_buf_left;
@@ -2037,7 +2077,9 @@ mz_uint32 tdefl_get_adler32(tdefl_compressor *d)
 
 mz_bool tdefl_compress_mem_to_output(const void *pBuf, size_t buf_len, tdefl_put_buf_func_ptr pPut_buf_func, void *pPut_buf_user, int flags)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     tdefl_compressor *pComp;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_bool succeeded;
     if (((buf_len) && (!pBuf)) || (!pPut_buf_func))
         return MZ_FALSE;
@@ -2064,6 +2106,7 @@ static mz_bool tdefl_output_buffer_putter(const void *pBuf, int len, void *pUser
     if (new_size > p->m_capacity)
     {
         size_t new_capacity = p->m_capacity;
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         mz_uint8 *pNew_buf;
         if (!p->m_expandable)
             return MZ_FALSE;
@@ -2147,7 +2190,9 @@ void *tdefl_write_image_to_png_file_in_memory_ex(const void *pImage, int w, int
     static const mz_uint s_tdefl_png_num_probes[11] = { 0, 1, 6, 32, 16, 32, 128, 256, 512, 768, 1500 };
     tdefl_compressor *pComp = (tdefl_compressor *)MZ_MALLOC(sizeof(tdefl_compressor));
     tdefl_output_buffer out_buf;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     int i, bpl = w * num_chans, y, z;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 c;
     *pLen_out = 0;
     if (!pComp)
@@ -2164,6 +2209,7 @@ void *tdefl_write_image_to_png_file_in_memory_ex(const void *pImage, int w, int
     for (z = 41; z; --z)
         tdefl_output_buffer_putter(&z, 1, &out_buf);
     /* compress image data */
+    // NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)
     tdefl_init(pComp, tdefl_output_buffer_putter, &out_buf, s_tdefl_png_num_probes[MZ_MIN(10, level)] | TDEFL_WRITE_ZLIB_HEADER);
     for (y = 0; y < h; ++y)
     {
@@ -2447,10 +2493,13 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
     mz_uint8 *pCode_sizes[3];
 
     tinfl_status status = TINFL_STATUS_FAILED;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 num_bits, dist, counter, num_extra;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     tinfl_bit_buf_t bit_buf;
     const mz_uint8 *pIn_buf_cur = pIn_buf_next, *const pIn_buf_end = pIn_buf_next + *pIn_buf_size;
     mz_uint8 *pOut_buf_cur = pOut_buf_next, *const pOut_buf_end = pOut_buf_next ? pOut_buf_next + *pOut_buf_size : NULL;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     size_t out_buf_size_mask = (decomp_flags & TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF) ? (size_t)-1 : ((pOut_buf_next - pOut_buf_start) + *pOut_buf_size) - 1, dist_from_out_buf_start;
 
     /* Ensure the output buffer's size is a power of 2, unless the output buffer is large enough to hold the entire output file (in which case it doesn't matter). */
@@ -2483,6 +2532,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
         TINFL_GET_BYTE(2, r->m_zhdr1);
         counter = (((r->m_zhdr0 * 256 + r->m_zhdr1) % 31 != 0) || (r->m_zhdr1 & 32) || ((r->m_zhdr0 & 15) != 8));
         if (!(decomp_flags & TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF))
+            // NOLINTNEXTLINE(bugprone-misplaced-widening-cast,cppcoreguidelines-avoid-magic-numbers)
             counter |= (((1U << (8U + (r->m_zhdr0 >> 4))) > 32768U) || ((out_buf_size_mask + 1) < (size_t)((size_t)1 << (8U + (r->m_zhdr0 >> 4)))));
         if (counter)
         {
@@ -2520,6 +2570,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
             }
             while (counter)
             {
+                // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                 size_t n;
                 while (pOut_buf_cur >= pOut_buf_end)
                 {
@@ -2545,6 +2596,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
             if (r->m_type == 1)
             {
                 mz_uint8 *p = r->m_code_size_0;
+                // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                 mz_uint i;
                 r->m_table_sizes[0] = 288;
                 r->m_table_sizes[1] = 32;
@@ -2568,6 +2620,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
                 MZ_CLEAR_ARR(r->m_code_size_2);
                 for (counter = 0; counter < r->m_table_sizes[2]; counter++)
                 {
+                    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                     mz_uint s;
                     TINFL_GET_BITS(14, s, 3);
                     r->m_code_size_2[s_length_dezigzag[counter]] = (mz_uint8)s;
@@ -2576,10 +2629,15 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
             }
             for (; (int)r->m_type >= 0; r->m_type--)
             {
+                // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                 int tree_next, tree_cur;
+                // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                 mz_int16 *pLookUp;
+                // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                 mz_int16 *pTree;
+                // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                 mz_uint8 *pCode_size;
+                // NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers,cppcoreguidelines-init-variables)
                 mz_uint i, j, used_syms, total, sym_index, next_code[17], total_syms[16];
                 pLookUp = r->m_look_up[r->m_type];
                 pTree = pTrees[r->m_type];
@@ -2602,6 +2660,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
                 }
                 for (tree_next = -1, sym_index = 0; sym_index < r->m_table_sizes[r->m_type]; ++sym_index)
                 {
+                    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                     mz_uint rev_code = 0, l, cur_code, code_size = pCode_size[sym_index];
                     if (!code_size)
                         continue;
@@ -2627,6 +2686,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
                     rev_code >>= (TINFL_FAST_LOOKUP_BITS - 1);
                     for (j = code_size; j > (TINFL_FAST_LOOKUP_BITS + 1); j--)
                     {
+                        // NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)
                         tree_cur -= ((rev_code >>= 1) & 1);
                         if (!pTree[-tree_cur - 1])
                         {
@@ -2637,6 +2697,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
                         else
                             tree_cur = pTree[-tree_cur - 1];
                     }
+                    // NOLINTNEXTLINE(bugprone-narrowing-conversions,clang-analyzer-deadcode.DeadStores,cppcoreguidelines-narrowing-conversions)
                     tree_cur -= ((rev_code >>= 1) & 1);
                     pTree[-tree_cur - 1] = (mz_int16)sym_index;
                 }
@@ -2644,6 +2705,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
                 {
                     for (counter = 0; counter < (r->m_table_sizes[0] + r->m_table_sizes[1]);)
                     {
+                        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                         mz_uint s;
                         TINFL_HUFF_DECODE(16, dist, r->m_look_up[2], r->m_tree_2);
                         if (dist < 16)
@@ -2655,6 +2717,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
                         {
                             TINFL_CR_RETURN_FOREVER(17, TINFL_STATUS_FAILED);
                         }
+                        // NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers,bugprone-signed-char-misuse)
                         num_extra = "\02\03\07"[dist - 16];
                         TINFL_GET_BITS(18, s, num_extra);
                         s += "\03\03\013"[dist - 16];
@@ -2671,6 +2734,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
             }
             for (;;)
             {
+                // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                 mz_uint8 *pSrc;
                 for (;;)
                 {
@@ -2687,7 +2751,9 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
                     }
                     else
                     {
+                        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                         int sym2;
+                        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                         mz_uint code_len;
 #if TINFL_USE_64BIT_BITBUF
                         if (num_bits < 30)
@@ -2759,6 +2825,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
                 counter = s_length_base[counter - 257];
                 if (num_extra)
                 {
+                    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                     mz_uint extra_bits;
                     TINFL_GET_BITS(25, extra_bits, num_extra);
                     counter += extra_bits;
@@ -2769,6 +2836,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
                 dist = s_dist_base[dist];
                 if (num_extra)
                 {
+                    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                     mz_uint extra_bits;
                     TINFL_GET_BITS(27, extra_bits, num_extra);
                     dist += extra_bits;
@@ -2856,6 +2924,7 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex
     {
         for (counter = 0; counter < 4; ++counter)
         {
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             mz_uint s;
             if (num_bits)
                 TINFL_GET_BITS(41, s, 8);
@@ -2892,6 +2961,7 @@ common_exit:
     {
         const mz_uint8 *ptr = pOut_buf_next;
         size_t buf_len = *pOut_buf_size;
+        // NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers,cppcoreguidelines-init-variables)
         mz_uint32 i, s1 = r->m_check_adler32 & 0xffff, s2 = r->m_check_adler32 >> 16;
         size_t block_len = buf_len % 5552;
         while (buf_len)
@@ -2924,12 +2994,14 @@ common_exit:
 void *tinfl_decompress_mem_to_heap(const void *pSrc_buf, size_t src_buf_len, size_t *pOut_len, int flags)
 {
     tinfl_decompressor decomp;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     void *pBuf = NULL, *pNew_buf;
     size_t src_buf_ofs = 0, out_buf_capacity = 0;
     *pOut_len = 0;
     tinfl_init(&decomp);
     for (;;)
     {
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         size_t src_buf_size = src_buf_len - src_buf_ofs, dst_buf_size = out_buf_capacity - *pOut_len, new_out_buf_capacity;
         tinfl_status status = tinfl_decompress(&decomp, (const mz_uint8 *)pSrc_buf + src_buf_ofs, &src_buf_size, (mz_uint8 *)pBuf, pBuf ? (mz_uint8 *)pBuf + *pOut_len : NULL, &dst_buf_size,
                                                (flags & ~TINFL_FLAG_HAS_MORE_INPUT) | TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF);
@@ -2962,6 +3034,7 @@ void *tinfl_decompress_mem_to_heap(const void *pSrc_buf, size_t src_buf_len, siz
 size_t tinfl_decompress_mem_to_mem(void *pOut_buf, size_t out_buf_len, const void *pSrc_buf, size_t src_buf_len, int flags)
 {
     tinfl_decompressor decomp;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     tinfl_status status;
     tinfl_init(&decomp);
     status = tinfl_decompress(&decomp, (const mz_uint8 *)pSrc_buf, &src_buf_len, (mz_uint8 *)pOut_buf, (mz_uint8 *)pOut_buf, &out_buf_len, (flags & ~TINFL_FLAG_HAS_MORE_INPUT) | TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF);
@@ -3355,6 +3428,7 @@ static MZ_FORCEINLINE void mz_zip_array_clear(mz_zip_archive *pZip, mz_zip_array
 
 static mz_bool mz_zip_array_ensure_capacity(mz_zip_archive *pZip, mz_zip_array *pArray, size_t min_new_capacity, mz_uint growing)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     void *pNew_p;
     size_t new_capacity = min_new_capacity;
     MZ_ASSERT(pArray->m_element_size);
@@ -3518,6 +3592,7 @@ static mz_bool mz_zip_reader_init_internal(mz_zip_archive *pZip, mz_uint flags)
 
 static MZ_FORCEINLINE mz_bool mz_zip_reader_filename_less(const mz_zip_array *pCentral_dir_array, const mz_zip_array *pCentral_dir_offsets, mz_uint l_index, mz_uint r_index)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     const mz_uint8 *pL = &MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_array, mz_uint8, MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_offsets, mz_uint32, l_index)), *pE;
     const mz_uint8 *pR = &MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_array, mz_uint8, MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_offsets, mz_uint32, r_index));
     mz_uint l_len = MZ_READ_LE16(pL + MZ_ZIP_CDH_FILENAME_LEN_OFS), r_len = MZ_READ_LE16(pR + MZ_ZIP_CDH_FILENAME_LEN_OFS);
@@ -3550,7 +3625,9 @@ static void mz_zip_reader_sort_central_dir_offsets_by_filename(mz_zip_archive *p
     mz_zip_internal_state *pState = pZip->m_pState;
     const mz_zip_array *pCentral_dir_offsets = &pState->m_central_dir_offsets;
     const mz_zip_array *pCentral_dir = &pState->m_central_dir;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 *pIndices;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 start, end;
     const mz_uint32 size = pZip->m_total_files;
 
@@ -3562,6 +3639,7 @@ static void mz_zip_reader_sort_central_dir_offsets_by_filename(mz_zip_archive *p
     start = (size - 2U) >> 1U;
     for (;;)
     {
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         mz_uint64 child, root = start;
         for (;;)
         {
@@ -3581,6 +3659,7 @@ static void mz_zip_reader_sort_central_dir_offsets_by_filename(mz_zip_archive *p
     end = size - 1;
     while (end > 0)
     {
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         mz_uint64 child, root = 0;
         MZ_SWAP_UINT32(pIndices[end], pIndices[0]);
         for (;;)
@@ -3599,6 +3678,7 @@ static void mz_zip_reader_sort_central_dir_offsets_by_filename(mz_zip_archive *p
 
 static mz_bool mz_zip_reader_locate_header_sig(mz_zip_archive *pZip, mz_uint32 record_sig, mz_uint32 record_size, mz_int64 *pOfs)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_int64 cur_file_ofs;
     mz_uint32 buf_u32[4096 / sizeof(mz_uint32)];
     mz_uint8 *pBuf = (mz_uint8 *)buf_u32;
@@ -3611,6 +3691,7 @@ static mz_bool mz_zip_reader_locate_header_sig(mz_zip_archive *pZip, mz_uint32 r
     cur_file_ofs = MZ_MAX((mz_int64)pZip->m_archive_size - (mz_int64)sizeof(buf_u32), 0);
     for (;;)
     {
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         int i, n = (int)MZ_MIN(sizeof(buf_u32), pZip->m_archive_size - cur_file_ofs);
 
         if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs, pBuf, n) != (mz_uint)n)
@@ -3648,6 +3729,7 @@ static mz_bool mz_zip_reader_read_central_dir(mz_zip_archive *pZip, mz_uint flag
     mz_uint cdir_size = 0, cdir_entries_on_this_disk = 0, num_this_disk = 0, cdir_disk_index = 0;
     mz_uint64 cdir_ofs = 0;
     mz_int64 cur_file_ofs = 0;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     const mz_uint8 *p;
 
     mz_uint32 buf_u32[4096 / sizeof(mz_uint32)];
@@ -3705,7 +3787,9 @@ static mz_bool mz_zip_reader_read_central_dir(mz_zip_archive *pZip, mz_uint flag
 
     if (pZip->m_pState->m_zip64)
     {
+        // NOLINTNEXTLINE(clang-analyzer-core.UndefinedBinaryOperatorResult)
         mz_uint32 zip64_total_num_of_disks = MZ_READ_LE32(pZip64_locator + MZ_ZIP64_ECDL_TOTAL_NUMBER_OF_DISKS_OFS);
+        // NOLINTNEXTLINE(clang-analyzer-core.UndefinedBinaryOperatorResult)
         mz_uint64 zip64_cdir_total_entries = MZ_READ_LE64(pZip64_end_of_central_dir + MZ_ZIP64_ECDH_CDIR_TOTAL_ENTRIES_OFS);
         mz_uint64 zip64_cdir_total_entries_on_this_disk = MZ_READ_LE64(pZip64_end_of_central_dir + MZ_ZIP64_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS);
         mz_uint64 zip64_size_of_end_of_central_dir_record = MZ_READ_LE64(pZip64_end_of_central_dir + MZ_ZIP64_ECDH_SIZE_OF_RECORD_OFS);
@@ -3757,6 +3841,7 @@ static mz_bool mz_zip_reader_read_central_dir(mz_zip_archive *pZip, mz_uint flag
 
     if (pZip->m_total_files)
     {
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         mz_uint i, n;
         /* Read the entire central directory into a heap block, and allocate another heap block to hold the unsorted central dir file record offsets, and possibly another to hold the sorted indices. */
         if ((!mz_zip_array_resize(pZip, &pZip->m_pState->m_central_dir, cdir_size, MZ_FALSE)) ||
@@ -3772,11 +3857,13 @@ static mz_bool mz_zip_reader_read_central_dir(mz_zip_archive *pZip, mz_uint flag
         if (pZip->m_pRead(pZip->m_pIO_opaque, cdir_ofs, pZip->m_pState->m_central_dir.m_p, cdir_size) != cdir_size)
             return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);
 
-        /* Now create an index into the central directory file records, do some basic sanity checking on each record */
+        /* Now create an index into the central directocry file records, do some basic sanity checking on each record */
         p = (const mz_uint8 *)pZip->m_pState->m_central_dir.m_p;
         for (n = cdir_size, i = 0; i < pZip->m_total_files; ++i)
         {
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             mz_uint total_header_size, disk_index, bit_flags, filename_size, ext_data_size;
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             mz_uint64 comp_size, decomp_size, local_header_ofs;
 
             if ((n < MZ_ZIP_CENTRAL_DIR_HEADER_SIZE) || (MZ_READ_LE32(p) != MZ_ZIP_CENTRAL_DIR_HEADER_SIG))
@@ -3793,8 +3880,7 @@ static mz_bool mz_zip_reader_read_central_dir(mz_zip_archive *pZip, mz_uint flag
             filename_size = MZ_READ_LE16(p + MZ_ZIP_CDH_FILENAME_LEN_OFS);
             ext_data_size = MZ_READ_LE16(p + MZ_ZIP_CDH_EXTRA_LEN_OFS);
 
-            if ((!pZip->m_pState->m_zip64_has_extended_info_fields) &&
-                (ext_data_size) &&
+            if ((ext_data_size) &&
                 (MZ_MAX(MZ_MAX(comp_size, decomp_size), local_header_ofs) == MZ_UINT32_MAX))
             {
                 /* Attempt to find zip64 extended information field in the entry's extra data */
@@ -3826,7 +3912,9 @@ static mz_bool mz_zip_reader_read_central_dir(mz_zip_archive *pZip, mz_uint flag
 
                     do
                     {
+                        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                         mz_uint32 field_id;
+                        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                         mz_uint32 field_data_size;
 
 						if (extra_size_remaining < (sizeof(mz_uint16) * 2))
@@ -3856,6 +3944,27 @@ static mz_bool mz_zip_reader_read_central_dir(mz_zip_archive *pZip, mz_uint flag
                         extra_size_remaining = extra_size_remaining - sizeof(mz_uint16) * 2 - field_data_size;
                     } while (extra_size_remaining);
 
+                    // Read zip64 extended information field
+                    // Header ID: 0x0001, field size: 2 bytes
+		    		if (extra_size_remaining >= sizeof(mz_uint16) * 2) {
+		    			extra_size_remaining = extra_size_remaining - sizeof(mz_uint16) * 2;
+					    pExtra_data += sizeof(mz_uint16) * 2;
+					    if (decomp_size == MZ_UINT32_MAX && extra_size_remaining >= sizeof(mz_uint64)) {
+							decomp_size = MZ_READ_LE64(pExtra_data);
+							extra_size_remaining -= sizeof(mz_uint64);
+							pExtra_data += sizeof(mz_uint64);
+					    }
+					    if (comp_size == MZ_UINT32_MAX && extra_size_remaining >= sizeof(mz_uint64)) {
+							comp_size = MZ_READ_LE64(pExtra_data);
+							extra_size_remaining -= sizeof(mz_uint64);
+							pExtra_data += sizeof(mz_uint64);
+					    }
+					    if (local_header_ofs == MZ_UINT32_MAX && extra_size_remaining >= sizeof(mz_uint64)) {
+							local_header_ofs = MZ_READ_LE64(pExtra_data);
+							extra_size_remaining -= sizeof(mz_uint64);
+							pExtra_data += sizeof(mz_uint64);
+					    }
+					}
 					MZ_FREE(buf);
                 }
             }
@@ -3873,7 +3982,7 @@ static mz_bool mz_zip_reader_read_central_dir(mz_zip_archive *pZip, mz_uint flag
 
             if (comp_size != MZ_UINT32_MAX)
             {
-                if (((mz_uint64)MZ_READ_LE32(p + MZ_ZIP_CDH_LOCAL_HEADER_OFS) + MZ_ZIP_LOCAL_DIR_HEADER_SIZE + comp_size) > pZip->m_archive_size)
+                if ((local_header_ofs + MZ_ZIP_LOCAL_DIR_HEADER_SIZE + comp_size) > pZip->m_archive_size)
                     return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);
             }
 
@@ -4138,6 +4247,7 @@ static MZ_FORCEINLINE const mz_uint8 *mz_zip_get_cdh(mz_zip_archive *pZip, mz_ui
 
 mz_bool mz_zip_reader_is_file_encrypted(mz_zip_archive *pZip, mz_uint file_index)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint m_bit_flag;
     const mz_uint8 *p = mz_zip_get_cdh(pZip, file_index);
     if (!p)
@@ -4152,7 +4262,9 @@ mz_bool mz_zip_reader_is_file_encrypted(mz_zip_archive *pZip, mz_uint file_index
 
 mz_bool mz_zip_reader_is_file_supported(mz_zip_archive *pZip, mz_uint file_index)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint bit_flag;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint method;
 
     const mz_uint8 *p = mz_zip_get_cdh(pZip, file_index);
@@ -4188,6 +4300,7 @@ mz_bool mz_zip_reader_is_file_supported(mz_zip_archive *pZip, mz_uint file_index
 
 mz_bool mz_zip_reader_is_file_a_directory(mz_zip_archive *pZip, mz_uint file_index)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint filename_len, attribute_mapping_id, external_attr;
     const mz_uint8 *p = mz_zip_get_cdh(pZip, file_index);
     if (!p)
@@ -4220,6 +4333,7 @@ mz_bool mz_zip_reader_is_file_a_directory(mz_zip_archive *pZip, mz_uint file_ind
 
 static mz_bool mz_zip_file_stat_internal(mz_zip_archive *pZip, mz_uint file_index, const mz_uint8 *pCentral_dir_header, mz_zip_archive_file_stat *pStat, mz_bool *pFound_zip64_extra_data)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint n;
     const mz_uint8 *p = pCentral_dir_header;
 
@@ -4276,7 +4390,9 @@ static mz_bool mz_zip_file_stat_internal(mz_zip_archive *pZip, mz_uint file_inde
 
             do
             {
+                // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                 mz_uint32 field_id;
+                // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                 mz_uint32 field_data_size;
 
                 if (extra_size_remaining < (sizeof(mz_uint16) * 2))
@@ -4322,7 +4438,9 @@ static mz_bool mz_zip_file_stat_internal(mz_zip_archive *pZip, mz_uint file_inde
                             return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);
 
                         pStat->m_local_header_ofs = MZ_READ_LE64(pField_data);
+                        // NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)
                         pField_data += sizeof(mz_uint64);
+                        // NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)
                         field_data_remaining -= sizeof(mz_uint64);
                     }
 
@@ -4340,6 +4458,7 @@ static mz_bool mz_zip_file_stat_internal(mz_zip_archive *pZip, mz_uint file_inde
 
 static MZ_FORCEINLINE mz_bool mz_zip_string_equal(const char *pA, const char *pB, mz_uint len, mz_uint flags)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint i;
     if (flags & MZ_ZIP_FLAG_CASE_SENSITIVE)
         return 0 == memcmp(pA, pB, len);
@@ -4351,6 +4470,7 @@ static MZ_FORCEINLINE mz_bool mz_zip_string_equal(const char *pA, const char *pB
 
 static MZ_FORCEINLINE int mz_zip_filename_compare(const mz_zip_array *pCentral_dir_array, const mz_zip_array *pCentral_dir_offsets, mz_uint l_index, const char *pR, mz_uint r_len)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     const mz_uint8 *pL = &MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_array, mz_uint8, MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_offsets, mz_uint32, l_index)), *pE;
     mz_uint l_len = MZ_READ_LE16(pL + MZ_ZIP_CDH_FILENAME_LEN_OFS);
     mz_uint8 l = 0, r = 0;
@@ -4408,6 +4528,7 @@ static mz_bool mz_zip_locate_file_binary_search(mz_zip_archive *pZip, const char
 
 int mz_zip_reader_locate_file(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 index;
     if (!mz_zip_reader_locate_file_v2(pZip, pName, pComment, flags, &index))
         return -1;
@@ -4417,7 +4538,9 @@ int mz_zip_reader_locate_file(mz_zip_archive *pZip, const char *pName, const cha
 
 mz_bool mz_zip_reader_locate_file_v2(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags, mz_uint32 *pIndex)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint file_index;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     size_t name_len, comment_len;
 
     if (pIndex)
@@ -4459,6 +4582,7 @@ mz_bool mz_zip_reader_locate_file_v2(mz_zip_archive *pZip, const char *pName, co
         }
         if ((flags & MZ_ZIP_FLAG_IGNORE_PATH) && (filename_len))
         {
+            // NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)
             int ofs = filename_len - 1;
             do
             {
@@ -4484,8 +4608,10 @@ static
 mz_bool mz_zip_reader_extract_to_mem_no_alloc1(mz_zip_archive *pZip, mz_uint file_index, void *pBuf, size_t buf_size, mz_uint flags, void *pUser_read_buf, size_t user_read_buf_size, const mz_zip_archive_file_stat *st)
 {
     int status = TINFL_STATUS_DONE;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint64 needed_size, cur_file_ofs, comp_remaining, out_buf_ofs = 0, read_buf_size, read_buf_ofs = 0, read_buf_avail;
     mz_zip_archive_file_stat file_stat;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     void *pRead_buf;
     mz_uint32 local_header_u32[(MZ_ZIP_LOCAL_DIR_HEADER_SIZE + sizeof(mz_uint32) - 1) / sizeof(mz_uint32)];
     mz_uint8 *pLocal_header = (mz_uint8 *)local_header_u32;
@@ -4583,6 +4709,7 @@ mz_bool mz_zip_reader_extract_to_mem_no_alloc1(mz_zip_archive *pZip, mz_uint fil
     do
     {
         /* The size_t cast here should be OK because we've verified that the output buffer is >= file_stat.m_uncomp_size above */
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         size_t in_buf_size, out_buf_size = (size_t)(file_stat.m_uncomp_size - out_buf_ofs);
         if ((!read_buf_avail) && (!pZip->m_pState->m_pMem))
         {
@@ -4634,6 +4761,7 @@ mz_bool mz_zip_reader_extract_to_mem_no_alloc(mz_zip_archive *pZip, mz_uint file
 
 mz_bool mz_zip_reader_extract_file_to_mem_no_alloc(mz_zip_archive *pZip, const char *pFilename, void *pBuf, size_t buf_size, mz_uint flags, void *pUser_read_buf, size_t user_read_buf_size)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 file_index;
     if (!mz_zip_reader_locate_file_v2(pZip, pFilename, NULL, flags, &file_index))
         return MZ_FALSE;
@@ -4652,8 +4780,11 @@ mz_bool mz_zip_reader_extract_file_to_mem(mz_zip_archive *pZip, const char *pFil
 
 void *mz_zip_reader_extract_to_heap(mz_zip_archive *pZip, mz_uint file_index, size_t *pSize, mz_uint flags)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_zip_archive_file_stat file_stat;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint64 alloc_size;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     void *pBuf;
 
     if (pSize)
@@ -4688,6 +4819,7 @@ void *mz_zip_reader_extract_to_heap(mz_zip_archive *pZip, mz_uint file_index, si
 
 void *mz_zip_reader_extract_file_to_heap(mz_zip_archive *pZip, const char *pFilename, size_t *pSize, mz_uint flags)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 file_index;
     if (!mz_zip_reader_locate_file_v2(pZip, pFilename, NULL, flags, &file_index))
     {
@@ -4704,6 +4836,7 @@ mz_bool mz_zip_reader_extract_to_callback(mz_zip_archive *pZip, mz_uint file_ind
 #ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS
     mz_uint file_crc32 = MZ_CRC32_INIT;
 #endif
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint64 read_buf_size, read_buf_ofs = 0, read_buf_avail, comp_remaining, out_buf_ofs = 0, cur_file_ofs;
     mz_zip_archive_file_stat file_stat;
     void *pRead_buf = NULL;
@@ -4780,6 +4913,7 @@ mz_bool mz_zip_reader_extract_to_callback(mz_zip_archive *pZip, mz_uint file_ind
 
             cur_file_ofs += file_stat.m_comp_size;
             out_buf_ofs += file_stat.m_comp_size;
+            // NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)
             comp_remaining = 0;
         }
         else
@@ -4829,6 +4963,7 @@ mz_bool mz_zip_reader_extract_to_callback(mz_zip_archive *pZip, mz_uint file_ind
             do
             {
                 mz_uint8 *pWrite_buf_cur = (mz_uint8 *)pWrite_buf + (out_buf_ofs & (TINFL_LZ_DICT_SIZE - 1));
+                // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
                 size_t in_buf_size, out_buf_size = TINFL_LZ_DICT_SIZE - (out_buf_ofs & (TINFL_LZ_DICT_SIZE - 1));
                 if ((!read_buf_avail) && (!pZip->m_pState->m_pMem))
                 {
@@ -4900,6 +5035,7 @@ mz_bool mz_zip_reader_extract_to_callback(mz_zip_archive *pZip, mz_uint file_ind
 
 mz_bool mz_zip_reader_extract_file_to_callback(mz_zip_archive *pZip, const char *pFilename, mz_file_write_func pCallback, void *pOpaque, mz_uint flags)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 file_index;
     if (!mz_zip_reader_locate_file_v2(pZip, pFilename, NULL, flags, &file_index))
         return MZ_FALSE;
@@ -4909,6 +5045,7 @@ mz_bool mz_zip_reader_extract_file_to_callback(mz_zip_archive *pZip, const char
 
 mz_zip_reader_extract_iter_state* mz_zip_reader_extract_iter_new(mz_zip_archive *pZip, mz_uint file_index, mz_uint flags)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_zip_reader_extract_iter_state *pState;
     mz_uint32 local_header_u32[(MZ_ZIP_LOCAL_DIR_HEADER_SIZE + sizeof(mz_uint32) - 1) / sizeof(mz_uint32)];
     mz_uint8 *pLocal_header = (mz_uint8 *)local_header_u32;
@@ -5037,6 +5174,7 @@ mz_zip_reader_extract_iter_state* mz_zip_reader_extract_iter_new(mz_zip_archive
 
 mz_zip_reader_extract_iter_state* mz_zip_reader_extract_file_iter_new(mz_zip_archive *pZip, const char *pFilename, mz_uint flags)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 file_index;
 
     /* Locate file index by name */
@@ -5098,6 +5236,7 @@ size_t mz_zip_reader_extract_iter_read(mz_zip_reader_extract_iter_state* pState,
             mz_uint8 *pWrite_buf_cur = (mz_uint8 *)pState->pWrite_buf + (pState->out_buf_ofs & (TINFL_LZ_DICT_SIZE - 1));
 
             /* Calc max output size - given current output pos and block size */
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             size_t in_buf_size, out_buf_size = TINFL_LZ_DICT_SIZE - (pState->out_buf_ofs & (TINFL_LZ_DICT_SIZE - 1));
 
             if (!pState->out_blk_remain)
@@ -5166,6 +5305,7 @@ size_t mz_zip_reader_extract_iter_read(mz_zip_reader_extract_iter_state* pState,
 
 mz_bool mz_zip_reader_extract_iter_free(mz_zip_reader_extract_iter_state* pState)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     int status;
 
     /* Argument sanity check */
@@ -5290,17 +5430,23 @@ static size_t mz_zip_compute_crc32_callback(void *pOpaque, mz_uint64 file_ofs, c
 mz_bool mz_zip_validate_file(mz_zip_archive *pZip, mz_uint file_index, mz_uint flags)
 {
     mz_zip_archive_file_stat file_stat;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_zip_internal_state *pState;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     const mz_uint8 *pCentral_dir_header;
     mz_bool found_zip64_ext_data_in_cdir = MZ_FALSE;
     mz_bool found_zip64_ext_data_in_ldir = MZ_FALSE;
     mz_uint32 local_header_u32[(MZ_ZIP_LOCAL_DIR_HEADER_SIZE + sizeof(mz_uint32) - 1) / sizeof(mz_uint32)];
     mz_uint8 *pLocal_header = (mz_uint8 *)local_header_u32;
     mz_uint64 local_header_ofs = 0;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 local_header_filename_len, local_header_extra_len, local_header_crc32;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint64 local_header_comp_size, local_header_uncomp_size;
     mz_uint32 uncomp_crc32 = MZ_CRC32_INIT;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_bool has_data_descriptor;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 local_header_bit_flags;
 
     mz_zip_array file_data_array;
@@ -5371,6 +5517,7 @@ mz_bool mz_zip_validate_file(mz_zip_archive *pZip, mz_uint file_index, mz_uint f
         }
 
         /* I've seen 1 archive that had the same pathname, but used backslashes in the local dir and forward slashes in the central dir. Do we care about this? For now, this case will fail validation. */
+        // NOLINTNEXTLINE(clang-analyzer-unix.cstring.NullArg)
         if (memcmp(file_stat.m_filename, file_data_array.m_p, local_header_filename_len) != 0)
         {
             mz_zip_set_error(pZip, MZ_ZIP_VALIDATION_FAILED);
@@ -5391,6 +5538,7 @@ mz_bool mz_zip_validate_file(mz_zip_archive *pZip, mz_uint file_index, mz_uint f
 
         do
         {
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             mz_uint32 field_id, field_data_size, field_total_size;
 
             if (extra_size_remaining < (sizeof(mz_uint16) * 2))
@@ -5398,7 +5546,8 @@ mz_bool mz_zip_validate_file(mz_zip_archive *pZip, mz_uint file_index, mz_uint f
                 mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);
                 goto handle_failure;
             }
-
+            
+            // NOLINTNEXTLINE(clang-analyzer-core.NullDereference)
             field_id = MZ_READ_LE16(pExtra_data);
             field_data_size = MZ_READ_LE16(pExtra_data + sizeof(mz_uint16));
             field_total_size = field_data_size + sizeof(mz_uint16) * 2;
@@ -5436,8 +5585,11 @@ mz_bool mz_zip_validate_file(mz_zip_archive *pZip, mz_uint file_index, mz_uint f
     if ((has_data_descriptor) && (!local_header_comp_size) && (!local_header_crc32))
     {
         mz_uint8 descriptor_buf[32];
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         mz_bool has_id;
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         const mz_uint8 *pSrc;
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         mz_uint32 file_crc32;
         mz_uint64 comp_size = 0, uncomp_size = 0;
 
@@ -5504,7 +5656,9 @@ handle_failure:
 
 mz_bool mz_zip_validate_archive(mz_zip_archive *pZip, mz_uint flags)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_zip_internal_state *pState;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 i;
 
     if ((!pZip) || (!pZip->m_pState) || (!pZip->m_pAlloc) || (!pZip->m_pFree) || (!pZip->m_pRead))
@@ -5531,6 +5685,7 @@ mz_bool mz_zip_validate_archive(mz_zip_archive *pZip, mz_uint flags)
     {
         if (MZ_ZIP_FLAG_VALIDATE_LOCATE_FILE_FLAG & flags)
         {
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             mz_uint32 found_index;
             mz_zip_archive_file_stat stat;
 
@@ -5680,6 +5835,7 @@ static size_t mz_zip_heap_write_func(void *pOpaque, mz_uint64 file_ofs, const vo
 
     if (new_size > pState->m_mem_capacity)
     {
+        // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
         void *pNew_block;
         size_t new_capacity = MZ_MAX(64, pState->m_mem_capacity);
 
@@ -5702,6 +5858,7 @@ static size_t mz_zip_heap_write_func(void *pOpaque, mz_uint64 file_ofs, const vo
 
 static mz_bool mz_zip_writer_end_internal(mz_zip_archive *pZip, mz_bool set_last_error)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_zip_internal_state *pState;
     mz_bool status = MZ_TRUE;
 
@@ -5925,6 +6082,7 @@ mz_bool mz_zip_writer_init_cfile(mz_zip_archive *pZip, MZ_FILE *pFile, mz_uint f
 
 mz_bool mz_zip_writer_init_from_reader_v2(mz_zip_archive *pZip, const char *pFilename, mz_uint flags)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_zip_internal_state *pState;
 
     if ((!pZip) || (!pZip->m_pState) || (pZip->m_zip_mode != MZ_ZIP_MODE_READING))
@@ -6172,6 +6330,7 @@ static mz_bool mz_zip_writer_validate_archive_name(const char *pArchive_name)
 
 static mz_uint mz_zip_writer_compute_padding_needed_for_file_alignment(mz_zip_archive *pZip)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 n;
     if (!pZip->m_file_offset_alignment)
         return 0;
@@ -6206,17 +6365,23 @@ mz_bool mz_zip_writer_add_mem_ex_v2(mz_zip_archive *pZip, const char *pArchive_n
                                     const char *user_extra_data, mz_uint user_extra_data_len, const char *user_extra_data_central, mz_uint user_extra_data_central_len)
 {
     mz_uint16 method = 0, dos_time = 0, dos_date = 0;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint level, ext_attributes = 0, num_alignment_padding_bytes;
     mz_uint64 local_dir_header_ofs = pZip->m_archive_size, cur_archive_file_ofs = pZip->m_archive_size, comp_size = 0;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     size_t archive_name_size;
     mz_uint8 local_dir_header[MZ_ZIP_LOCAL_DIR_HEADER_SIZE];
     tdefl_compressor *pComp = NULL;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_bool store_data_uncompressed;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_zip_internal_state *pState;
     mz_uint8 *pExtra_data = NULL;
     mz_uint32 extra_size = 0;
     mz_uint8 extra_data[MZ_ZIP64_MAX_CENTRAL_EXTRA_FIELD_SIZE];
     mz_uint16 bit_flags = 0;
+    mz_bool write_metadata_only = buf_size && !pBuf;
+    mz_bool skip_crc32 = write_metadata_only || (level_and_flags & MZ_ZIP_FLAG_DO_NOT_COMPUTE_CRC32);
 
     if ((int)level_and_flags < 0)
         level_and_flags = MZ_DEFAULT_LEVEL;
@@ -6230,7 +6395,7 @@ mz_bool mz_zip_writer_add_mem_ex_v2(mz_zip_archive *pZip, const char *pArchive_n
     level = level_and_flags & 0xF;
     store_data_uncompressed = ((!level) || (level_and_flags & MZ_ZIP_FLAG_COMPRESSED_DATA));
 
-    if ((!pZip) || (!pZip->m_pState) || (pZip->m_zip_mode != MZ_ZIP_MODE_WRITING) || ((buf_size) && (!pBuf)) || (!pArchive_name) || ((comment_size) && (!pComment)) || (level > MZ_UBER_COMPRESSION))
+    if ((!pZip) || (!pZip->m_pState) || (pZip->m_zip_mode != MZ_ZIP_MODE_WRITING) || (!pArchive_name) || ((comment_size) && (!pComment)) || (level > MZ_UBER_COMPRESSION))
         return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);
 
     pState = pZip->m_pState;
@@ -6275,7 +6440,9 @@ mz_bool mz_zip_writer_add_mem_ex_v2(mz_zip_archive *pZip, const char *pArchive_n
 
 	if (!(level_and_flags & MZ_ZIP_FLAG_COMPRESSED_DATA))
 	{
-		uncomp_crc32 = (mz_uint32)mz_crc32(MZ_CRC32_INIT, (const mz_uint8 *)pBuf, buf_size);
+        if (!skip_crc32) {
+            uncomp_crc32 = (mz_uint32)mz_crc32(MZ_CRC32_INIT, (const mz_uint8 *)pBuf, buf_size);
+        }
 		uncomp_size = buf_size;
 		if (uncomp_size <= 3)
 		{
@@ -6952,6 +7119,7 @@ static mz_bool mz_zip_writer_update_zip64_extension_block(mz_zip_array *pNew_ext
 
         do
         {
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             mz_uint32 field_id, field_data_size, field_total_size;
 
             if (extra_size_remaining < (sizeof(mz_uint16) * 2))
@@ -6981,19 +7149,29 @@ static mz_bool mz_zip_writer_update_zip64_extension_block(mz_zip_array *pNew_ext
 /* TODO: This func is now pretty freakin complex due to zip64, split it up? */
 mz_bool mz_zip_writer_add_from_zip_reader(mz_zip_archive *pZip, mz_zip_archive *pSource_zip, mz_uint src_file_index)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint n, bit_flags, num_alignment_padding_bytes, src_central_dir_following_data_size;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint64 src_archive_bytes_remaining, local_dir_header_ofs;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint64 cur_src_file_ofs, cur_dst_file_ofs;
     mz_uint32 local_header_u32[(MZ_ZIP_LOCAL_DIR_HEADER_SIZE + sizeof(mz_uint32) - 1) / sizeof(mz_uint32)];
     mz_uint8 *pLocal_header = (mz_uint8 *)local_header_u32;
     mz_uint8 new_central_header[MZ_ZIP_CENTRAL_DIR_HEADER_SIZE];
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     size_t orig_central_dir_size;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_zip_internal_state *pState;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     void *pBuf;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     const mz_uint8 *pSrc_central_header;
     mz_zip_archive_file_stat src_file_stat;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 src_filename_len, src_comment_len, src_ext_len;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint32 local_header_filename_size, local_header_extra_len;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint64 local_header_comp_size, local_header_uncomp_size;
     mz_bool found_zip64_ext_data_in_ldir = MZ_FALSE;
 
@@ -7082,6 +7260,7 @@ mz_bool mz_zip_writer_add_from_zip_reader(mz_zip_archive *pZip, mz_zip_archive *
 
         do
         {
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             mz_uint32 field_id, field_data_size, field_total_size;
 
             if (extra_size_remaining < (sizeof(mz_uint16) * 2))
@@ -7110,7 +7289,9 @@ mz_bool mz_zip_writer_add_from_zip_reader(mz_zip_archive *pZip, mz_zip_archive *
                     return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);
                 }
 
+                // NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)
                 local_header_uncomp_size = MZ_READ_LE64(pSrc_field_data);
+                // NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)
                 local_header_comp_size = MZ_READ_LE64(pSrc_field_data + sizeof(mz_uint64)); /* may be 0 if there's a descriptor */
 
                 found_zip64_ext_data_in_ldir = MZ_TRUE;
@@ -7202,6 +7383,7 @@ mz_bool mz_zip_writer_add_from_zip_reader(mz_zip_archive *pZip, mz_zip_archive *
         else
         {
             /* src is NOT zip64 */
+            // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
             mz_bool has_id;
 
             if (pSource_zip->m_pRead(pSource_zip->m_pIO_opaque, cur_src_file_ofs, pBuf, sizeof(mz_uint32) * 4) != sizeof(mz_uint32) * 4)
@@ -7239,7 +7421,7 @@ mz_bool mz_zip_writer_add_from_zip_reader(mz_zip_archive *pZip, mz_zip_archive *
             pZip->m_pFree(pZip->m_pAlloc_opaque, pBuf);
             return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);
         }
-
+        // NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)
         cur_src_file_ofs += n;
         cur_dst_file_ofs += n;
     }
@@ -7343,7 +7525,9 @@ mz_bool mz_zip_writer_add_from_zip_reader(mz_zip_archive *pZip, mz_zip_archive *
 
 mz_bool mz_zip_writer_finalize_archive(mz_zip_archive *pZip)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_zip_internal_state *pState;
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint64 central_dir_ofs, central_dir_size;
     mz_uint8 hdr[256];
 
@@ -7620,6 +7804,7 @@ mz_zip_type mz_zip_get_type(mz_zip_archive *pZip)
 
 mz_zip_error mz_zip_set_last_error(mz_zip_archive *pZip, mz_zip_error err_num)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_zip_error prev_err;
 
     if (!pZip)
@@ -7646,6 +7831,7 @@ mz_zip_error mz_zip_clear_last_error(mz_zip_archive *pZip)
 
 mz_zip_error mz_zip_get_last_error(mz_zip_archive *pZip)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_zip_error prev_err;
 
     if (!pZip)
@@ -7787,6 +7973,7 @@ size_t mz_zip_read_archive_data(mz_zip_archive *pZip, mz_uint64 file_ofs, void *
 
 mz_uint mz_zip_reader_get_filename(mz_zip_archive *pZip, mz_uint file_index, char *pFilename, mz_uint filename_buf_size)
 {
+    // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     mz_uint n;
     const mz_uint8 *p = mz_zip_get_cdh(pZip, file_index);
     if (!p)
diff --git a/miniz.h b/miniz.h
index 9fcfffc..9beebc0 100644
--- a/miniz.h
+++ b/miniz.h
@@ -126,7 +126,7 @@
 /* If MINIZ_NO_TIME is specified then the ZIP archive functions will not be able to get the current time, or */
 /* get/set file times, and the C run-time funcs that get/set times won't be called. */
 /* The current downside is the times written to your archives will be from 1979. */
-/*#define MINIZ_NO_TIME */
+#define MINIZ_NO_TIME
 
 /* Define MINIZ_NO_DEFLATE_APIS to disable all compression API's. */
 /*#define MINIZ_NO_DEFLATE_APIS */
@@ -144,7 +144,7 @@
 /*#define MINIZ_NO_ZLIB_APIS */
 
 /* Define MINIZ_NO_ZLIB_COMPATIBLE_NAME to disable zlib names, to prevent conflicts against stock zlib. */
-/*#define MINIZ_NO_ZLIB_COMPATIBLE_NAMES */
+#define MINIZ_NO_ZLIB_COMPATIBLE_NAMES
 
 /* Define MINIZ_NO_MALLOC to disable all calls to malloc, free, and realloc. 
    Note if MINIZ_NO_MALLOC is defined then the user must always provide custom user alloc/free/realloc
@@ -211,8 +211,10 @@
 #if !defined(MINIZ_USE_UNALIGNED_LOADS_AND_STORES)
 #if MINIZ_X86_OR_X64_CPU
 /* Set MINIZ_USE_UNALIGNED_LOADS_AND_STORES to 1 on CPU's that permit efficient integer loads and stores from unaligned addresses. */
+/* zdevito: ASAN doesn't like unligned loads and stores, and -O3 optimizes the unoptimized code pattern away anyawy */
 #define MINIZ_USE_UNALIGNED_LOADS_AND_STORES 0
-#define MINIZ_UNALIGNED_USE_MEMCPY
+/* zdevito: ASAN doesn't like unligned loads and stores, and -O3 optimizes the unoptimized code pattern away anyawy */
+/*#define MINIZ_UNALIGNED_USE_MEMCPY*/
 #else
 #define MINIZ_USE_UNALIGNED_LOADS_AND_STORES 0
 #endif
@@ -1074,7 +1076,9 @@ typedef enum {
     MZ_ZIP_FLAG_ASCII_FILENAME = 0x10000,
     /*After adding a compressed file, seek back
     to local file header and set the correct sizes*/
-    MZ_ZIP_FLAG_WRITE_HEADER_SET_SIZE = 0x20000
+    MZ_ZIP_FLAG_WRITE_HEADER_SET_SIZE = 0x20000,
+    MZ_ZIP_FLAG_DO_NOT_COMPUTE_CRC32 = 0x80000, 
+    /* don't compute the crc32 of file data that's being added. */
 } mz_zip_flags;
 
 typedef enum {
@@ -1124,7 +1128,7 @@ typedef enum {
     MZ_ZIP_TOTAL_ERRORS
 } mz_zip_error;
 
-typedef struct
+typedef struct mz_zip_archive /* note: added name so it can be forward declared */
 {
     mz_uint64 m_archive_size;
     mz_uint64 m_central_directory_file_ofs;
