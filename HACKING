-*- mode: org; coding: utf-8; -*-
Copyright Â© 2025 Ayan Das <bvits@riseup.net>
#+TITLE: Hacking myguix
  Copying and distribution of this file, with or without modification,
  are permitted in any medium without royalty provided the copyright
  notice and this notice are preserved.

* Introduction

This file contains guidelines for developing and maintaining the myguix channel.

* Development Setup

Enter the development environment with:

#+begin_src shell
guix shell -m manifest.scm
#+end_src

* Daily Development Workflow

** Working on Packages

*** Adding a New Package

#+begin_src shell
# Edit the appropriate module
$EDITOR myguix/packages/machine-learning.scm

# Test compilation without installing
./pre-inst-env guix build -L . python-transformers-myguix

# Check for common issues
./pre-inst-env guix lint -L . python-transformers-myguix

# Test in an isolated environment
./pre-inst-env guix shell -L . python-transformers-myguix -- python -c "import transformers"
#+end_src

*** Updating Existing Packages

#+begin_src shell
# Check for upstream updates
./pre-inst-env guix refresh -L . python-pytorch-myguix

# Update and test
$EDITOR myguix/packages/machine-learning.scm
./pre-inst-env guix build -L . python-pytorch-myguix --check
#+end_src

** Working on Services

#+begin_src shell
# Edit service module
$EDITOR myguix/services/nvidia.scm

# Test in a VM with a test configuration
./pre-inst-env guix system vm -L . test-config.scm
#+end_src

Example test configuration:
#+begin_src scheme
(use-modules (gnu)
             (myguix services nvidia))

(operating-system
  ;; ... base config ...
  (services (cons (nvidia-driver-service)
                  %base-services)))
#+end_src

** Adding Patches

1. Place the patch file in =myguix/packages/patches/=
2. Add it to the =PATCHES= list in =Makefile.am=
3. Use it in your package:

#+begin_src scheme
(source (origin
          ;; ...
          (patches (search-myguix-patches "my-fix.patch"))))
#+end_src

* Testing

** Running Tests

#+begin_src shell
# Compile all modules
make

# Run full test suite
make check

# Test a specific module interactively
./pre-inst-env guile -L . -c '(use-modules (myguix packages nvidia))'
#+end_src

** Debugging Build Failures

#+begin_src shell
# Keep build directory for inspection
./pre-inst-env guix build -L . problematic-package --keep-failed

# Enter build environment
./pre-inst-env guix shell -L . -D problematic-package
cd /tmp/guix-build-problematic-package-*.drv-0
source environment-variables
# Debug interactively...
#+end_src

** Testing the Channel

Before pushing, test that the channel works:

#+begin_src shell
# Create a test channel configuration
cat > test-channels.scm <<EOF
(cons (channel
        (name 'myguix)
        (url (string-append "file://" (getcwd))))
      %default-channels)
EOF

# Test building a package using the channel
guix time-machine -C test-channels.scm -- build firefox-myguix
#+end_src

* Git Workflow

** Branching Strategy

- =main= - stable, tested code
- =feature/*= - new packages or features
- =fix/*= - bug fixes

** Commit Messages

Follow GNU ChangeLog style:

#+begin_example
packages: Add ROCm 6.0.

* myguix/packages/rocm.scm: New file.
(rocm-runtime, rocm-device-libs): New variables.
#+end_example

** Signing Commits

Always sign your commits:

#+begin_src shell
git commit -S -m "Your message"
#+end_src

* Code Style

** Formatting

Use =guix style= to format code:

#+begin_src shell
./pre-inst-env guix style -L . package-name
#+end_src

** Module Organization

- Keep related packages together
- One package per variable (avoid multiple versions in one definition)
- Use =-myguix= suffix for packages that override Guix packages

* Interactive Development

** Using the REPL

#+begin_src shell
./pre-inst-env guile
#+end_src

#+begin_src scheme
,use (myguix packages nvidia)
,describe nvidia-driver
,build nvidia-driver  ; if geiser is loaded
#+end_src

** Emacs Integration

With =.dir-locals.el= properly set up, Geiser should automatically use the right load paths when you open a file in the project.

* Release Process

1. Update version in =configure.ac=
2. Update =NEWS= with notable changes
3. Regenerate build system:
   #+begin_src shell
   ./bootstrap
   ./configure
   make dist
   #+end_src
4. Tag the release:
   #+begin_src shell
   git tag -s v0.2.0 -m "Release version 0.2.0"
   git push origin v0.2.0
   #+end_src

* Tips and Tricks

** Performance Profiling

#+begin_src shell
# Profile package builds
./pre-inst-env guix build -L . heavy-package --profile=build
#+end_src

** Checking Module Dependencies

#+begin_src shell
# See what a module imports
./pre-inst-env guile -c '(use-modules (ice-9 session) (myguix packages nvidia)) (module-uses (current-module))'
#+end_src

** Batch Building

#+begin_src shell
# Build all packages from a module
./pre-inst-env guix build -L . -e '(@ (myguix packages nvidia) nvidia-driver)' \
                               -e '(@ (myguix packages nvidia) nvidia-libs)'
#+end_src

* Troubleshooting

** Import Cycles

If you get "import cycle" errors:
1. Check module dependencies with =module-uses=
2. Move common utilities to =(myguix utils)=
3. Consider splitting large modules

** Compilation Errors

- Always run =make clean-go= after significant changes
- Check for stray =.go= files with =find . -name "*.go"=
- Ensure all new files are added to =Makefile.am=

* Contributing

For external contributors:
1. Fork the repository
2. Create a feature branch
3. Make your changes following these guidelines
4. Submit a merge/pull request

For questions or discussions, reach out to bvits@riseup.net.
